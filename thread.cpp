/*****************************************************************************************************************************
******************************************************************************************************************************
マルチスレッドに必要な関数をまとめたソースファイル
レーザーレンジファインダのデータ更新や物体検出プログラムのマルチスレッド化のために使用


******************************************************************************************************************************
*****************************************************************************************************************************/
#include "thread.h"



///********************************************************
//関数名：InitThread
//説明　：クリティカルセクションの初期化とスレッドの初期設定
//引数　：CRITICAL_SECTION *cs					 クリティカルセクションに必要な構造体（編集等は不可）
//		HANDLE *hThread				             スレッドのハンドル
//		unsigned __stdcall threadFunc(void *p)	 スレッド内で処理する関数
//		
//出力　：HANDLE *hThread
//********************************************************/
//void InitThread(CRITICAL_SECTION *cs, HANDLE *hThread, unsigned __stdcall threadFunc(void *p)){
//
//	InitializeCriticalSection(cs);/* クリティカルセクション初期化！ */
//
//	*hThread = (HANDLE)_beginthreadex(NULL, 0, threadFunc, 0, CREATE_SUSPENDED, NULL);
//	ResumeThread(*hThread);
//
//}
//
//
///********************************************************
//関数名：InitThread
//説明　：クリティカルセクションの初期化とスレッドの初期設定
//引数　：CRITICAL_SECTION *cs					 クリティカルセクションに必要な構造体（編集等は不可）
//		HANDLE *hThread				             スレッドのハンドル
//		
//********************************************************/
//void EndThread(CRITICAL_SECTION *cs, HANDLE *hThread){
//
//	WaitForSingleObject(*hThread,INFINITE);
//	CloseHandle(*hThread);
//   
//    DeleteCriticalSection(cs);/* クリティカルセクション終わり */
//
//}
